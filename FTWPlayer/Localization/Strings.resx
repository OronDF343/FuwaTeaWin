<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="NextToolTip" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="PauseToolTip" xml:space="preserve">
    <value>Pause</value>
  </data>
  <data name="PlayerTabHeader" xml:space="preserve">
    <value>PLAYER</value>
  </data>
  <data name="PlayToolTip" xml:space="preserve">
    <value>Play</value>
  </data>
  <data name="PreviousToolTip" xml:space="preserve">
    <value>Previous</value>
  </data>
  <data name="ResumeToolTip" xml:space="preserve">
    <value>Resume</value>
  </data>
  <data name="StopToolTip" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="WelcomeText" xml:space="preserve">
    <value>FuwaTeaWin Testing Version</value>
    <comment>Scrolling text that is shown when no file is loaded</comment>
  </data>
  <data name="EqualizerTabHeader" xml:space="preserve">
    <value>EQUALIZER</value>
  </data>
  <data name="SettingsTabHeader" xml:space="preserve">
    <value>SETTINGS</value>
  </data>
  <data name="ExitToolTip" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="ShowToolTip" xml:space="preserve">
    <value>Show Window</value>
  </data>
  <data name="HideToolTip" xml:space="preserve">
    <value>Hide Window</value>
  </data>
  <data name="CompactToolTip" xml:space="preserve">
    <value>Change to Compact Mode</value>
  </data>
  <data name="ExpandToolTip" xml:space="preserve">
    <value>Change to Expanded Mode</value>
  </data>
  <data name="RepeatAllToolTip" xml:space="preserve">
    <value>Repeat (Entire list)</value>
  </data>
  <data name="RepeatOffToolTip" xml:space="preserve">
    <value>Repeat (Off)</value>
  </data>
  <data name="RepeatSingleToolTip" xml:space="preserve">
    <value>Repeat (Current song)</value>
  </data>
  <data name="ShuffleOffToolTip" xml:space="preserve">
    <value>Shuffle (Off)</value>
  </data>
  <data name="ShuffleOnToolTip" xml:space="preserve">
    <value>Shuffle (On)</value>
  </data>
  <data name="VolumeToolTip" xml:space="preserve">
    <value>Volume</value>
  </data>
  <data name="LibraryTabHeader" xml:space="preserve">
    <value>LIBRARY</value>
  </data>
  <data name="TagsTabHeader" xml:space="preserve">
    <value>TAGS</value>
  </data>
  <data name="AllSupportedPlaylists" xml:space="preserve">
    <value>All supported playlist types</value>
  </data>
  <data name="FileTypeFormatString" xml:space="preserve">
    <value>{0} ({1})</value>
    <comment>{0} is description, {1} is *.ext</comment>
  </data>
  <data name="AddToPlaylistFormatString" xml:space="preserve">
    <value>Add to {0}'s playlist</value>
    <comment>{0} is "FTW Player"</comment>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>A compact, modular and open-source music player</value>
  </data>
  <data name="PlayWithFormatString" xml:space="preserve">
    <value>Play with {0}</value>
    <comment>{0} is "FTW Player"</comment>
  </data>
  <data name="AllSettings" xml:space="preserve">
    <value>All Settings</value>
  </data>
  <data name="ExclusiveMode" xml:space="preserve">
    <value>Exclusive Mode</value>
  </data>
  <data name="OutputAPI" xml:space="preserve">
    <value>Output API:</value>
  </data>
  <data name="OutputDevice" xml:space="preserve">
    <value>Output device:</value>
  </data>
  <data name="PlaybackSettings" xml:space="preserve">
    <value>Playback</value>
  </data>
  <data name="Skins" xml:space="preserve">
    <value>Skins</value>
  </data>
  <data name="HelpTabHeader" xml:space="preserve">
    <value>HELP</value>
  </data>
  <data name="AppCrash" xml:space="preserve">
    <value>{0} has crashed!</value>
  </data>
  <data name="UnhandledExceptionMessage" xml:space="preserve">
    <value>An unhandled exception has occured! See ftw.log for more information.
Please report this to the author with a copy of ftw.log.</value>
  </data>
  <data name="Apply" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="LoadedSkin" xml:space="preserve">
    <value>Currently loaded skin:</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="Command" xml:space="preserve">
    <value>Command</value>
  </data>
  <data name="Enabled" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="EnableKeyBindings" xml:space="preserve">
    <value>Enable keyboard shortcuts</value>
  </data>
  <data name="KeyBindings" xml:space="preserve">
    <value>Keyboard
Shortcuts</value>
  </data>
  <data name="Keys" xml:space="preserve">
    <value>Key combination</value>
  </data>
  <data name="Kind" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Parameters" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Remove</value>
  </data>
</root>